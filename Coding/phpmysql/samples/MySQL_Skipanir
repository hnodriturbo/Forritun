/* Að búa til, nota og eyða database */
create databasename;
use databasename;
drop databasename;


/* view data from the table is using the SELECT statement. It has the following syntax: */
SELECT column1, column2, ... FROM table_name;
You can also view data from all columns using:
SELECT * FROM `offices`;



INSERT INTO table_name(column_1, column_2,...) VALUES (value1_1,value1_2,...), (value2_1,value2_2,...), ...;
/* If you're inserting values for all the columns, you can skip the column names: */
INSERT INTO table_name VALUES (value1_1, value1_2, ...), (value2_1,value2_2,...), ...;



/* We can add a WHERE clause to a SELECT statement to select just the rows satisfying the given clause. */
SELECT * FROM `employees` WHERE `jobTitle`="Sales Rep";
The WHERE clause supports the following operators:
= > < >= <= <> or != BETWEEN LIKE IN



/* Expressions within a WHERE clause can be combined using AND and OR */
SELECT column1, column2, ...
FROM table_name
WHERE condition1 AND condition2 AND condition3 ...;



/* An expression within a WHERE clause can be negated using NOT. */
SELECT column1, column2, ...
FROM table_name
WHERE NOT condition;
You can use a WHERE clause with SELECT, UPDATE, and DELETE statements.




/* The results of a Select statement can be ordered using the ORDER BY clause: */
SELECT column1, column2, ...
FROM table_name
ORDER BY column1, column2, ... ASC|DESC;



/* To limit the number of results, use the LIMIT clause: */
SELECT column_name(s)
FROM table_name
WHERE condition
LIMIT number;



update employees set reportsTo="1002" where jobTitle="Sales Rep" and officeCode="1";
SELECT salesRepEmployeeNumber FROM customers WHERE country="France";
select customerName, country FROM customers where customerName like "%Toys%";




/* The structure of the table can be modified using ALTER TABLE */

/* Adding a new column to a table: */
ALTER TABLE table_name ADD column_name datatype;
alter table employees add hiredOn date;
/* Removing a column from a table: */
ALTER TABLE table_name DROP COLUMN column_name;
/* Changing the data type of a column: */
ALTER TABLE table_name MODIFY COLUMN column_name datatype;
/* Renaming a column: */
ALTER TABLE table_name RENAME COLUMN old_column_name TO new_column_name;





/* --------- Að ná í upplýsingar um foreign lykla í database tables -------- */
SELECT CONSTRAINT_NAME, UPDATE_RULE, DELETE_RULE
FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
WHERE CONSTRAINT_SCHEMA = 'vefverslun'
  AND TABLE_NAME = 'orders'
  AND REFERENCED_TABLE_NAME = 'users';





  /* --------- AÐ SETJA USER ID COLUMN MEÐ AUTO GENERATED UID ---------- */
  /* Adda column fyrir UID */
ALTER TABLE admin_accounts ADD admin_uid VARCHAR(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL;
/* Gera trigger sem generatar UID í hvert skipti sem row er inserted */
DELIMITER //
CREATE TRIGGER trg_generate_uuid
BEFORE INSERT ON admin_accounts
FOR EACH ROW
BEGIN
    SET NEW.uid = UUID();
END//
DELIMITER ;

/* Þetta er til að uppfæra þá sem eru nú þegar skráðir og generate UID */
UPDATE admin_accounts SET admin_uid = UUID() WHERE admin_id = 'your_admin_id';





/* Import and export data into a database */
/* import */
$ /usr/local/mysql/bin/mysql -u root -p < database.sql
This is a great way to import data into a SQL database.
/* export */
To export a database as a SQL file, use the mysqldump utility:
$ /usr/local/mysql/mysqldump --add-drop-table -u admin dbname -p > dbname.sql



/* The COUNT() function returns the number of rows that matches a specified criterion. */
COUNT() Syntax
SELECT COUNT(column_name)
FROM table_name
WHERE condition;

/* The AVG() function returns the average value of a numeric column.  */
AVG() Syntax
SELECT AVG(column_name)
FROM table_name
WHERE condition;

/* The SUM() function returns the total sum of a numeric column.  */
SUM() Syntax
SELECT SUM(column_name)
FROM table_name
WHERE condition;

/* Sýna, lýsa og býa til tables */
show tables;
describe tablaname;
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    column3 datatype,
   ....
);








DROP TABLE IF EXISTS `offices`;
CREATE TABLE `offices` (
  `officeCode` varchar(10) NOT NULL,
  `city` varchar(50) NOT NULL,
  `phone` varchar(50) NOT NULL,
  `addressLine1` varchar(50) NOT NULL,
  `addressLine2` varchar(50),
  `state` varchar(50),
  `country` varchar(50) NOT NULL,
  `postalCode` varchar(15) NOT NULL,
  `territory` varchar(10) NOT NULL,
  PRIMARY KEY (`officeCode`) // primary key getur verið á fleiri en einum dálk
);

INSERT INTO `offices` 
(`officeCode`,`city`,`phone`,`addressLine1`,`addressLine2`,`state`,`country`,`postalCode`,`territory`) VALUES 
('1','San Francisco','+1 650 219 4782','100 Market Street','Suite 300','CA','USA','94080','NA'),
('2','Boston','+1 215 837 0825','1550 Court Place','Suite 102','MA','USA','02107','NA');

DROP TABLE IF EXISTS `employees`;
CREATE TABLE `employees` (
  `employeeNumber` int(11) NOT NULL,
  `lastName` varchar(50) NOT NULL,
  `firstName` varchar(50) NOT NULL,
  `extension` varchar(10) NOT NULL,
  `email` varchar(100) NOT NULL,
  `officeCode` varchar(10) NOT NULL,
  `reportsTo` int(11) DEFAULT NULL,
  `jobTitle` varchar(50) NOT NULL,
  PRIMARY KEY (`employeeNumber`),
  FOREIGN KEY (`reportsTo`) REFERENCES `employees` (`employeeNumber`),
  FOREIGN KEY (`officeCode`) REFERENCES `offices` (`officeCode`)
);

INSERT INTO `employees` VALUES
(1002,'Murphy','Diane','x5800','dmurphy@classicmodelcars.com','1',NULL,'President'),
(1056,'Patterson','Mary','x4611','mpatterso@classicmodelcars.com','1',1002,'VP Sales');

CREATE TABLE IF NOT EXISTS `customers` (
    `customerNumber` INT(11) NOT NULL,
    `customerName` VARCHAR(50) NOT NULL,
    `contactLastName` VARCHAR(50) NOT NULL,
    `contactFirstName` VARCHAR(50) NOT NULL,
    `phone` VARCHAR(50) NOT NULL,
    `addressLine1` VARCHAR(50) NOT NULL,
    `addressLine2` VARCHAR(50) NULL DEFAULT NULL,
    `city` VARCHAR(50) NOT NULL,
    `state` VARCHAR(50) NULL DEFAULT NULL,
    `postalCode` VARCHAR(15) NULL DEFAULT NULL,
    `country` VARCHAR(50) NOT NULL,
    `salesRepEmployeeNumber` INT(11) NULL,
    `creditLimit` DOUBLE NULL DEFAULT NULL,
    `customerLocation` POINT NOT NULL,
    PRIMARY KEY (`customerNumber`),
    FOREIGN KEY (`salesRepEmployeeNumber`) REFERENCES `employees` (`employeeNumber`)
);
CREATE TABLE `productlines` (
    `productLine` varchar(50) NOT NULL,
    `textDescription` varchar(4000) DEFAULT NULL,
    `htmlDescription` mediumtext,
    `image` mediumblob,
    PRIMARY KEY (`productLine`)
  );
CREATE TABLE `products` (
    `productCode` varchar(15) NOT NULL,
    `productName` varchar(70) NOT NULL,
    `productLine` varchar(50) NOT NULL,
    `productScale` varchar(10) NOT NULL,
    `productVendor` varchar(50) NOT NULL,
    `productDescription` text NOT NULL,
    `quantityInStock` smallint(6) NOT NULL,
    `buyPrice` decimal(10,2) NOT NULL,
    `MSRP` decimal(10,2) NOT NULL,
    PRIMARY KEY (`productCode`),
    CONSTRAINT `products_ibfk_1` FOREIGN KEY (`productLine`) REFERENCES `productlines` (`productLine`)
  );
  DROP TABLE IF EXISTS `productlines`;

  CREATE TABLE `productlines` (
    `productLine` varchar(50) NOT NULL,
    `textDescription` varchar(4000) DEFAULT NULL,
    `htmlDescription` mediumtext,
    `image` mediumblob,
    PRIMARY KEY (`productLine`)
  );
  DROP TABLE IF EXISTS `products`;

CREATE TABLE `products` (
  `productCode` varchar(15) NOT NULL,
  `productName` varchar(70) NOT NULL,
  `productLine` varchar(50) NOT NULL,
  `productScale` varchar(10) NOT NULL,
  `productVendor` varchar(50) NOT NULL,
  `productDescription` text NOT NULL,
  `quantityInStock` smallint(6) NOT NULL,
  `buyPrice` decimal(10,2) NOT NULL,
  `MSRP` decimal(10,2) NOT NULL,
  PRIMARY KEY (`productCode`),
  CONSTRAINT `products_ibfk_1` FOREIGN KEY (`productLine`) REFERENCES `productlines` (`productLine`)
);